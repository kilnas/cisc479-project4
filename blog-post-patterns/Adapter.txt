The Adapter Design Pattern is used to make classes with different interfaces work together.
This pattern assumes two pre-existing classes/interfaces that are not directly compatible.
The connection is created by making an instance of an adapter class, which converts the interface of 
one class into the interface of another which is more expected.
<br></br>
My example contains two "incompatible" classes - Dog and Human. Their methods are specific to their classes 
ie, printDogName vs. printHumanName. A dog has no last name and has a "Woof!" greeting. A human says "Hello"
and introduces themselves with their first and last name.
<br></br>
Let's say some dogs want to be treated like humans. We create a HumanAdapter class that extends Human,
so it has all the same methods as a human. We give the adapter a Dog property. This is the dog that 
is basically wearing a "HumanAdapter" disguise. We then adapt the Human methods in a way that our HumanAdapter
can use on a Dog. For example, printHumanName